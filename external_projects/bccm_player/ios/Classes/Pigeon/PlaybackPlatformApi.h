// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, PlaybackState) {
  PlaybackStateStopped = 0,
  PlaybackStatePaused = 1,
  PlaybackStatePlaying = 2,
};

typedef NS_ENUM(NSUInteger, CastConnectionState) {
  CastConnectionStateNone = 0,
  CastConnectionStateNoDevicesAvailable = 1,
  CastConnectionStateNotConnected = 2,
  CastConnectionStateConnecting = 3,
  CastConnectionStateConnected = 4,
};

typedef NS_ENUM(NSUInteger, TrackType) {
  TrackTypeAudio = 0,
  TrackTypeText = 1,
};

@class NpawConfig;
@class AppConfig;
@class MediaItem;
@class MediaMetadata;
@class PlayerStateSnapshot;
@class ChromecastState;
@class PlayerTracksSnapshot;
@class Track;
@class PrimaryPlayerChangedEvent;
@class PlayerStateUpdateEvent;
@class PositionDiscontinuityEvent;
@class PlaybackStateChangedEvent;
@class PlaybackEndedEvent;
@class PictureInPictureModeChangedEvent;
@class MediaItemTransitionEvent;

@interface NpawConfig : NSObject
+ (instancetype)makeWithAppName:(nullable NSString *)appName
    appReleaseVersion:(nullable NSString *)appReleaseVersion
    accountCode:(nullable NSString *)accountCode
    deviceIsAnonymous:(nullable NSNumber *)deviceIsAnonymous;
@property(nonatomic, copy, nullable) NSString * appName;
@property(nonatomic, copy, nullable) NSString * appReleaseVersion;
@property(nonatomic, copy, nullable) NSString * accountCode;
@property(nonatomic, strong, nullable) NSNumber * deviceIsAnonymous;
@end

@interface AppConfig : NSObject
+ (instancetype)makeWithAppLanguage:(nullable NSString *)appLanguage
    audioLanguage:(nullable NSString *)audioLanguage
    subtitleLanguage:(nullable NSString *)subtitleLanguage
    analyticsId:(nullable NSString *)analyticsId
    sessionId:(nullable NSNumber *)sessionId;
@property(nonatomic, copy, nullable) NSString * appLanguage;
@property(nonatomic, copy, nullable) NSString * audioLanguage;
@property(nonatomic, copy, nullable) NSString * subtitleLanguage;
@property(nonatomic, copy, nullable) NSString * analyticsId;
@property(nonatomic, strong, nullable) NSNumber * sessionId;
@end

@interface MediaItem : NSObject
+ (instancetype)makeWithUrl:(nullable NSString *)url
    mimeType:(nullable NSString *)mimeType
    metadata:(nullable MediaMetadata *)metadata
    isLive:(nullable NSNumber *)isLive
    playbackStartPositionMs:(nullable NSNumber *)playbackStartPositionMs
    lastKnownAudioLanguage:(nullable NSString *)lastKnownAudioLanguage
    lastKnownSubtitleLanguage:(nullable NSString *)lastKnownSubtitleLanguage;
@property(nonatomic, copy, nullable) NSString * url;
@property(nonatomic, copy, nullable) NSString * mimeType;
@property(nonatomic, strong, nullable) MediaMetadata * metadata;
@property(nonatomic, strong, nullable) NSNumber * isLive;
@property(nonatomic, strong, nullable) NSNumber * playbackStartPositionMs;
@property(nonatomic, copy, nullable) NSString * lastKnownAudioLanguage;
@property(nonatomic, copy, nullable) NSString * lastKnownSubtitleLanguage;
@end

@interface MediaMetadata : NSObject
+ (instancetype)makeWithArtworkUri:(nullable NSString *)artworkUri
    title:(nullable NSString *)title
    artist:(nullable NSString *)artist
    durationMs:(nullable NSNumber *)durationMs
    extras:(nullable NSDictionary<NSString *, id> *)extras;
@property(nonatomic, copy, nullable) NSString * artworkUri;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * artist;
@property(nonatomic, strong, nullable) NSNumber * durationMs;
@property(nonatomic, strong, nullable) NSDictionary<NSString *, id> * extras;
@end

@interface PlayerStateSnapshot : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    playbackState:(PlaybackState)playbackState
    isBuffering:(NSNumber *)isBuffering
    isFullscreen:(NSNumber *)isFullscreen
    currentMediaItem:(nullable MediaItem *)currentMediaItem
    playbackPositionMs:(nullable NSNumber *)playbackPositionMs;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, assign) PlaybackState playbackState;
@property(nonatomic, strong) NSNumber * isBuffering;
@property(nonatomic, strong) NSNumber * isFullscreen;
@property(nonatomic, strong, nullable) MediaItem * currentMediaItem;
@property(nonatomic, strong, nullable) NSNumber * playbackPositionMs;
@end

@interface ChromecastState : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithConnectionState:(CastConnectionState)connectionState
    mediaItem:(nullable MediaItem *)mediaItem;
@property(nonatomic, assign) CastConnectionState connectionState;
@property(nonatomic, strong, nullable) MediaItem * mediaItem;
@end

@interface PlayerTracksSnapshot : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    audioTracks:(NSArray<Track *> *)audioTracks
    textTracks:(NSArray<Track *> *)textTracks;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, strong) NSArray<Track *> * audioTracks;
@property(nonatomic, strong) NSArray<Track *> * textTracks;
@end

@interface Track : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    label:(nullable NSString *)label
    language:(nullable NSString *)language
    isSelected:(NSNumber *)isSelected;
@property(nonatomic, copy) NSString * id;
@property(nonatomic, copy, nullable) NSString * label;
@property(nonatomic, copy, nullable) NSString * language;
@property(nonatomic, strong) NSNumber * isSelected;
@end

@interface PrimaryPlayerChangedEvent : NSObject
+ (instancetype)makeWithPlayerId:(nullable NSString *)playerId;
@property(nonatomic, copy, nullable) NSString * playerId;
@end

@interface PlayerStateUpdateEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    snapshot:(PlayerStateSnapshot *)snapshot;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, strong) PlayerStateSnapshot * snapshot;
@end

@interface PositionDiscontinuityEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    playbackPositionMs:(nullable NSNumber *)playbackPositionMs;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, strong, nullable) NSNumber * playbackPositionMs;
@end

@interface PlaybackStateChangedEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    playbackState:(PlaybackState)playbackState
    isBuffering:(NSNumber *)isBuffering;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, assign) PlaybackState playbackState;
@property(nonatomic, strong) NSNumber * isBuffering;
@end

@interface PlaybackEndedEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    mediaItem:(nullable MediaItem *)mediaItem;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, strong, nullable) MediaItem * mediaItem;
@end

@interface PictureInPictureModeChangedEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    isInPipMode:(NSNumber *)isInPipMode;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, strong) NSNumber * isInPipMode;
@end

@interface MediaItemTransitionEvent : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSString *)playerId
    mediaItem:(nullable MediaItem *)mediaItem;
@property(nonatomic, copy) NSString * playerId;
@property(nonatomic, strong, nullable) MediaItem * mediaItem;
@end

/// The codec used by PlaybackPlatformPigeon.
NSObject<FlutterMessageCodec> *PlaybackPlatformPigeonGetCodec(void);

@protocol PlaybackPlatformPigeon
- (void)attachWithCompletion:(void (^)(FlutterError *_Nullable))completion;
- (void)newPlayer:(nullable NSString *)url completion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)queueMediaItem:(NSString *)playerId mediaItem:(MediaItem *)mediaItem completion:(void (^)(FlutterError *_Nullable))completion;
- (void)replaceCurrentMediaItem:(NSString *)playerId mediaItem:(MediaItem *)mediaItem playbackPositionFromPrimary:(nullable NSNumber *)playbackPositionFromPrimary autoplay:(nullable NSNumber *)autoplay completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setPlayerViewVisibility:(NSNumber *)viewId visible:(NSNumber *)visible error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setPrimary:(NSString *)id completion:(void (^)(FlutterError *_Nullable))completion;
- (void)play:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
- (void)seek:(NSString *)playerId positionMs:(NSNumber *)positionMs completion:(void (^)(FlutterError *_Nullable))completion;
- (void)pause:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
- (void)stop:(NSString *)playerId reset:(NSNumber *)reset error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setSelectedTrack:(NSString *)playerId type:(TrackType)type trackId:(nullable NSString *)trackId completion:(void (^)(FlutterError *_Nullable))completion;
- (void)exitFullscreen:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
- (void)enterFullscreen:(NSString *)playerId error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setNpawConfig:(nullable NpawConfig *)config error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setAppConfig:(nullable AppConfig *)config error:(FlutterError *_Nullable *_Nonnull)error;
- (void)getTracks:(nullable NSString *)playerId completion:(void (^)(PlayerTracksSnapshot *_Nullable, FlutterError *_Nullable))completion;
- (void)getPlayerState:(nullable NSString *)playerId completion:(void (^)(PlayerStateSnapshot *_Nullable, FlutterError *_Nullable))completion;
- (void)getChromecastState:(void (^)(ChromecastState *_Nullable, FlutterError *_Nullable))completion;
- (void)openExpandedCastController:(FlutterError *_Nullable *_Nonnull)error;
- (void)openCastDialog:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PlaybackPlatformPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PlaybackPlatformPigeon> *_Nullable api);

/// The codec used by PlaybackListenerPigeon.
NSObject<FlutterMessageCodec> *PlaybackListenerPigeonGetCodec(void);

////////////////// Playback Listener
@interface PlaybackListenerPigeon : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onPrimaryPlayerChanged:(PrimaryPlayerChangedEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onPositionDiscontinuity:(PositionDiscontinuityEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onPlayerStateUpdate:(PlayerStateUpdateEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onPlaybackStateChanged:(PlaybackStateChangedEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onPlaybackEnded:(PlaybackEndedEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onMediaItemTransition:(MediaItemTransitionEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onPictureInPictureModeChanged:(PictureInPictureModeChangedEvent *)event completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
